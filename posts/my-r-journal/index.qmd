---
title: "My R Journal"
description:  "Things I learn along my R programming journey."
author: "Howard Baek"
date: "2023-07-11"
categories: [Software Engineering]
image: "thumbnail.jpg"
---

Tips and tricks I learn to program in R.

## R package

### Demystifying Dependencies

Choose whether package dependency is an "Imports" or a "Suggests" package: <https://r-pkgs.org/dependencies-mindset-background.html#sec-dependencies-imports-vs-suggests>

"Imports": Read Section 11.1 ~ 11.4 from the R Packages book: <https://r-pkgs.org/dependencies-in-practice.html#confusion-about-imports>. 

"Suggests": Read Section 11.5 from the R Packages book:
<https://r-pkgs.org/dependencies-in-practice.html#sec-dependencies-in-suggests>

### Submitting to CRAN

#### First release:

-   `usethis::use_news_md()` creates a NEWS.md file with "News" items
-   `usethis::use_cran_comments()` initiates a file to hold submission comments for your package
-   Update instructions on README to install package from Github to from CRAN, in anticipation of your package's acceptance.
-   Proofread `Title:` and `Desription:` fields of DESCRIPTION as they are real hotspots for nitpicking during CRAN's human review. Read advice given in [Section 9.2](https://r-pkgs.org/description.html#sec-description-title-and-description) of the R Packages book.
-   Check that all exported functions have `@returns` and `@examples`
-   Check licenses
-   Review <https://github.com/DavisVaughan/extrachecks> (extra ad-hoc checks that CRAN does that are not checked for by `devtools::check()`)

To keep tabs on what other package maintainers are talking about, <https://stat.ethz.ch/mailman/listinfo/r-package-devel>

#### Updating a package already on CRAN:

-   Check current CRAN check results
-   If you have depcreated functions, check [Gradual deprecation](https://lifecycle.r-lib.org/articles/communicate.html#gradual-deprecation)
-   Update [NEWS](https://style.tidyverse.org/news.html#news-release) with changes to the package.
-   Run `urlchecker::url_check()` and `devtools::build_readme()`

#### Always Run No Matter What:

-   `devtools::check(remote = TRUE, manual = TRUE)`
-   `devtools::check_win_devel()`
-   `rhub::check_for_cran()` (There are some bug-related messages, like `Skipping checking HTML validation: no command 'tidy' found`, `Found the following files/directories: NULL or lastMiKTeXException`)

#### Reverse Dependency Check:

Running for the first time: `usethis::use_revdep()` Then, run `revdepcheck::revdep_check(num_workers = 4)`

#### Ready to Submit:

-   Bump the version number in DESCRIPTION
-   `devtools::submit_cran()`. After a successful upload, you should receive an email from CRAN within a few minutes. This email notifies you, as maintainer, of the submission and provides a confirmation link.
-   At the confirmation link, you are required to re-confirm that you've followed CRAN's policies and that you want to submit the package. If you fail to complete this step, your package is not actually submitted to CRAN!

## APIs

### Google APIs and OAuth 2.0

Source: <https://developers.google.com/identity/protocols/oauth2>

Google APIs use the [OAuth 2.0 protocol](https://datatracker.ietf.org/doc/html/rfc6749) for authentication and authorization. To begin, obtain OAuth 2.0 client credentials from the [Google Cloud](https://console.cloud.google.com/). See [this page](https://gargle.r-lib.org/articles/get-api-credentials.html) on getting your own API credentials. Then your client application requests an access token from the Google Authorization Server, extracts a token from the response, and sends the token to the Google API that you want to access.

For an interactive demonstration of using OAuth 2.0 with Google (including the option to use your own client credentials), experiment with the [OAuth 2.0 Playground](https://developers.google.com/oauthplayground/).

Before your application can access private data using a Google API, it must obtain an access token that grants access to that API. A single access token can grant varying degrees of access to multiple APIs. A variable parameter called `scope` controls the set of resources and operations that an access token permits.

Some requests require an authentication step where the user logs in with their Google account. After logging in, the user is asked whether they are willing to grant one or more permissions that your application is requesting. This process is called user consent.

See [this diagram](https://developers.google.com/identity/protocols/oauth2#webserver) to get an overview of the entire process of calling a Google API.

Further Reading on dealing with OAuth 2.0 in R:

-   <https://blog.r-hub.io/2021/01/25/oauth-2.0/>
-   <https://googledrive.tidyverse.org/articles/bring-your-own-app.html>
-   <https://www.youtube.com/watch?v=hHRFjbGTEOk>
-   <https://www.youtube.com/watch?v=3pZ3Nh8tgTE>
